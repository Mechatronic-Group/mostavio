---
import { Image } from "astro:assets";
import { externalLinks } from "consts";
import { isVideo } from "@lib/utils";
import { cn } from "@lib/utils";

export interface VideoSource {
    source: string;
    poster?: ImageMetadata;
}
export interface MediaProps {
    media: Array<string | VideoSource | ImageMetadata>;
    playbackRate?: number; // playback rate for videos, default 1
    content?: {
        header?: string;
        description?: string;
    };
    placeholderImage?: ImageMetadata;
}
let activeMedia: number = 0;
const { media, content, placeholderImage, playbackRate } =
    Astro.props as MediaProps;
---

<section
    class="relative w-full h-screen overflow-hidden scroll-mt-24 bg-gradient-default"
    id="home"
>
    {
        placeholderImage ? (
            <Image
                class="w-full h-[80vh] md:h-screen object-cover opacity-50"
                src={placeholderImage}
                alt="MOSTAVIO HERO"
            />
        ) : (
            <div
                id="media"
                class="flex h-full items-center justify-center"
                data-media={JSON.stringify(media)}
                data-playback-rate={playbackRate}
            >
                {media.map((each, index) => {
                    let mediaSrc: any =
                        typeof each === "object" && "source" in each
                            ? each.source
                            : each;
                    let mediaPoster =
                        typeof each === "object" && "poster" in each
                            ? each.poster
                            : undefined;
                    return isVideo(mediaSrc) ? (
                        <video
                            id={`media-${index}`}
                            class={`w-full h-[80vh] md:h-screen object-cover ${index === activeMedia ? "" : "hidden"}`}
                            autoplay={index === activeMedia}
                            muted
                            loop
                            playsinline
                            src={mediaSrc}
                            transition:persist
                        />
                    ) : (
                        <Image
                            id={`media-${index}`}
                            class={`w-full h-[80vh] md:h-screen object-cover ${index === activeMedia ? "" : "hidden"}`}
                            src={mediaSrc}
                            alt="MOSTAVIO HERO"
                        />
                    );
                })}
            </div>
        )
    }
    <div class="absolute inset-0 top-1/3 text-center mx-auto">
        <h2
            style="text-shadow: 4px 4px 4px rgba(0, 0, 0, 0.25);"
            class="m-4 md:m-8 text-gray-900 dark:text-white font-bold text-4xl sm:text-5xl md:text-6xl"
        >
            {content?.header || "Experience the Future of Flight"}
        </h2>
        <div class="text-gray-900 dark:text-white m-auto py-4 max-w-xl">
            {
                content?.description ||
                    "Transforming Urban Air Mobility with Next-Generation eVTOL Technology"
            }
        </div>
    </div>

    <div
        class="absolute bottom-24 left-1/2 transform -translate-x-1/2 space-x-2 z-10"
    >
        {
            media.map((_, index) => (
                <button
                    id={`dot-${index}`}
                    class={cn(
                        "swiper-pagination-bullet inline-block h-2 w-2 rounded-full bg-white",
                        index === activeMedia
                            ? "swiper-pagination-bullet-active"
                            : "",
                        media.length > 1 ? "" : "hidden",
                    )}
                    data-index={index}
                />
            ))
        }
    </div>
    <div
        class="absolute bottom-8 md:bottom-8 right-8 md:right-20 text-gray-950 dark:text-white flex gap-4 z-10"
    >
        {
            externalLinks.map((item, index) => (
                <button
                    class="relative align-middle select-none hover:text-stone-400"
                    type="button"
                >
                    <Fragment set:html={item?.icon} />
                </button>
            ))
        }
    </div>
    <script>
        // this js is for runtime; above it is for build time
        import { isVideo } from "@lib/utils";
        const wrapperElement = document.getElementById("media");
        const dots = document.querySelectorAll(".swiper-pagination-bullet");
        const media = JSON.parse(
            wrapperElement?.getAttribute("data-media") || "[]",
        );
        let intervalId;

        // Start the interval for the first media
        let activeMedia = 0;
        updateMedia();

        function updateMedia() {
            media.forEach((src, index) => {
                const mediaElement = document.getElementById(`media-${index}`);
                const dot = document.getElementById(`dot-${index}`);
                mediaElement &&
                    mediaElement.classList.toggle(
                        "hidden",
                        activeMedia !== index,
                    );
                dot &&
                    dot.classList.toggle(
                        "swiper-pagination-bullet-active",
                        activeMedia === index,
                    );

                if (isVideo(src)) {
                    const videoElement = mediaElement as HTMLVideoElement;
                    const playbackRate = Number(
                        wrapperElement?.getAttribute("data-playback-rate"),
                    );
                    videoElement.playbackRate = playbackRate || 1;
                    videoElement.addEventListener("ended", nextMedia);
                    if (activeMedia === index) {
                        videoElement.classList.add("blur");
                        videoElement.setAttribute("autoplay", "true");
                        videoElement.play();
                    } else {
                        videoElement.pause();
                    }
                    videoElement.classList.remove("blur");
                } else {
                    if (activeMedia === index) {
                        setTimeout(nextMedia, 5000);
                    }
                }
            });
        }

        function nextMedia() {
            activeMedia = (activeMedia + 1) % media.length;
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
            updateMedia();
        }

        dots.forEach((dot, index) => {
            dot.addEventListener("click", () => {
                activeMedia = Number(dot.getAttribute("data-index"));
                updateMedia();
            });
        });
    </script>
    <div
        class="md:hidden absolute bottom-0 left-0 right-0 h-[20vh] bg-gradient-to-t from-black to-transparent"
    >
    </div>
</section>

<style is:global>
    .blur {
        filter: blur(5px);
    }
    section.bg-gradient-default {
        position: relative;
    }
    section.bg-gradient-default::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 20%;
        background: linear-gradient(to bottom, rgb(12 11 10), rgba(0, 0, 0, 0));
    }
    section.bg-gradient-default::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 25%;
        background: linear-gradient(to top, rgb(12 11 10), rgba(0, 0, 0, 0));
    }
    .swiper-button::after {
        font-size: 32px;
        color: rgb(215, 119, 22);
    }
    .swiper-pagination-bullet:not(.swiper-pagination-bullet-active) {
        background: #ffffff;
    }

    :root {
        --swiper-theme-color: rgb(215, 119, 22) !important;
        --swiper-pagination-bullet-inactive-opacity: 0.85;
    }
</style>
