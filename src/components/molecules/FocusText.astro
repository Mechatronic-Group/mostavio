---
import Container from "./Container.astro";
import Button from "@components/atoms/Button.astro";

interface FocusTextProps {
    tagline?: string;
    header?: string;
    subheader?: string;
    description?: string | [string];
    link?: string;
    ctaLabel?: string;
    contentClass?: string;
    containerClass?: string;
    headerClass?: string;
    buttonClass?: string;
    headerShadow?: boolean;
}

const {
    tagline,
    header,
    subheader,
    description,
    link,
    contentClass,
    containerClass,
    headerShadow,
    headerClass = "",
    buttonClass,
    ctaLabel = "Learn More",
} = Astro.props as FocusTextProps;
const shadowClass = headerShadow
    ? "leading-tight bg-gradient-to-b from-white \
     via-gray-100 to-black bg-clip-text text-transparent"
    : "";
---

<section>
    <Container>
        <div class={`relative flex  ${containerClass}`}>
            <div
                class={`my-12 m-auto text-center ${header ? "space-y-12" : "space-y-4"} ${contentClass}`}
            >
                <div>
                    {tagline && <p class="uppercase">{tagline}</p>}
                    {
                        header && (
                            <h2
                                class={`text-4xl font-bold  md:text-6xl ${shadowClass} ${headerClass}`}
                            >
                                {header}
                            </h2>
                        )
                    }
                    {
                        subheader && (
                            <h6 class="text-2xl font-bold text-white md:text-3xl">
                                {subheader}
                            </h6>
                        )
                    }
                </div>
                {
                    description && (
                        <div class="text-lg text-gray-300 space-y-4">
                            <Fragment set:html={description} />
                        </div>
                    )
                }
                <slot />
                {
                    link && (
                        <Button
                            variant="transparent"
                            containerClass={buttonClass}
                            link={link}
                            ctaLabel={ctaLabel}
                        />
                    )
                }
            </div>
        </div>
    </Container>
</section>
